Batch files _kgPk.cmd and _kgPkUtils.cmd, located in this directory,
allow allow generating public and private key pairs.

1. "General" key, generated by _kgPk.cmd.
Such key files have names in the form 
  Pk.SpecificName.Public.snk
  Pk.SpecificName.KeyPair.snk
where SpecificName is the name given by the input argument.
To generate such files, call "_kgPk.cmd SpecificName"

2. "Util" key, generated by _kgPkUtils.cmd.
Such key files have names in the form 
  Pk.PkUtils.Public.snk
  Pk.PkUtils.KeyPair.snk
To generate such files, call "_kgPkUtils.cmd"

Remark: 
  You must have a public/private key pair to to sign an assembly with a strong name.
  It is only really needed if you want to place your assemblies in the GAC, 
  but it also helps against tampering. 
  It is fairly easy to change the code in an assembly so this gives bad people an advantage. 
  When you are using strong named assemblies you are signing it with a private key only you have. 
  People could still change your assembly, but they can't give it the same strong name, 
  because they do not have your private key. In that case .Net refuses the assembly tampered with. 
  When they sign your assembly with a new private key the .Net still refuses to load it 
  since the identity of the assembly has changed.
  
Reference:
 - How to Create a Public/Private Key Pair, see instance 
   http://msdn.microsoft.com/en-us/library/6f05ezxy(v=vs.110).aspx
 - Creating and Using Strong-Named Assemblies
   http://msdn.microsoft.com/en-us/library/xwb8f617(v=vs.110).aspx
 - Delay signing an assembly  
   http://msdn.microsoft.com/en-us/library/t07a3dye(v=vs.110).aspx
 - The Secrets of Strong Naming   
   http://www.windowsdevcenter.com/pub/a/dotnet/2003/04/28/strongnaming.html